import { InterfaceDeclaration } from '../integration/definition'
import z from '../zui'

const ImageModelRefSchema = z.object({
  id: z.string(),
})

const ImageModelSchema = ImageModelRefSchema.extend({
  name: z.string(),
  costPerImage: z.number().describe('Cost per image generation, in U.S. dollars'),
  sizes: z.array(z.string()).describe('Available image sizes'),
  defaultSize: z.string().describe('Default image size generated by model'),
})

const ImageGenerationParamsSchema = z.object({}).describe('Model-specific parameters for image generation')

const GenerateImageInputSchema = <TModelRef extends z.ZodSchema, TParams extends z.ZodSchema>(
  imageModelRefSchema: TModelRef,
  paramsSchema: TParams
) =>
  z.object({
    model: imageModelRefSchema.optional().describe('Model to use for image generation'),
    prompt: z.string(),
    size: z.string().optional(),
    params: paramsSchema.optional(),
  })

const GenerateContentInputBaseSchema = GenerateImageInputSchema(ImageModelRefSchema, ImageGenerationParamsSchema)

const GenerateImageOutputSchema = z.object({
  model: z.string().describe('Model name used'),
  imageUrl: z.string().describe('Temporary URL of generated image'),
  cost: z.number().describe('Cost of the image generation, in U.S. dollars'),
})

export const textToImage = new InterfaceDeclaration({
  name: 'textToImage',
  version: '1.0.0',
  entities: {
    imageModelRef: {
      schema: ImageModelRefSchema,
    },
    imageGenerationParams: {
      schema: ImageGenerationParamsSchema,
    },
  },
  actions: {
    generateImage: {
      input: {
        schema: ({ imageModelRef, imageGenerationParams }) =>
          GenerateImageInputSchema(imageModelRef, imageGenerationParams),
      },
      output: {
        schema: () => GenerateImageOutputSchema,
      },
    },
    listImageModels: {
      input: {
        schema: () => z.object({}),
      },
      output: {
        schema: ({ imageModelRef }) =>
          z.object({
            models: z.array(z.intersection(ImageModelSchema, imageModelRef)),
          }),
      },
    },
  },
})

export namespace textToImage {
  export type GenerateImageInputSchema = z.infer<typeof GenerateContentInputBaseSchema>
  export type GenerateImageOutputSchema = z.infer<typeof GenerateImageOutputSchema>
  export type ImageModel = z.infer<typeof ImageModelSchema>
  export type ImageModelDetails = Omit<ImageModel, 'id'>
}
